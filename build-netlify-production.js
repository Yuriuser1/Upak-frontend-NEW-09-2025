#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Starting Netlify production build...');

// –°–æ–∑–¥–∞–µ–º next.config.js –¥–ª—è Netlify —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π plugin
const netlifyNextConfig = `
const path = require('path');

/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
  experimental: {
    outputFileTracingRoot: path.join(__dirname, '../'),
  },
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Netlify
  trailingSlash: false,
  images: {
    domains: ['upak.tech', 'localhost'],
    unoptimized: false, // –û—Å—Ç–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è Netlify
  },
  // –ò—Å–∫–ª—é—á–∞–µ–º Prisma –∏–∑ build –µ—Å–ª–∏ –Ω–µ—Ç DATABASE_URL
  webpack: (config, { isServer }) => {
    if (isServer && !process.env.DATABASE_URL) {
      config.externals = config.externals || [];
      config.externals.push('@prisma/client');
    }
    return config;
  },
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã API routes –Ω–∞ Netlify
  async rewrites() {
    return [];
  },
  // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤
  async headers() {
    return [
      {
        source: '/api/:path*',
        headers: [
          {
            key: 'Cache-Control',
            value: 'no-cache, no-store, must-revalidate',
          },
        ],
      },
    ];
  },
};

module.exports = nextConfig;
`;

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
const originalConfig = fs.existsSync('next.config.js') ? fs.readFileSync('next.config.js', 'utf8') : '';

try {
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º Netlify –∫–æ–Ω—Ñ–∏–≥
  fs.writeFileSync('next.config.js', netlifyNextConfig);
  
  console.log('‚úÖ Created Netlify production next.config.js');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.DATABASE_URL) {
    console.log('üöß DATABASE_URL not set, Prisma will be mocked during build');
  } else {
    console.log('üóÑÔ∏è DATABASE_URL found, Prisma will be initialized');
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É
  console.log('üì¶ Building Next.js application...');
  execSync('npm run build', { stdio: 'inherit' });
  
  console.log('‚úÖ Netlify production build completed successfully!');
  
} catch (error) {
  console.error('‚ùå Build failed:', error.message);
  process.exit(1);
} finally {
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
  if (originalConfig) {
    fs.writeFileSync('next.config.js', originalConfig);
    console.log('‚úÖ Restored original next.config.js');
  }
}