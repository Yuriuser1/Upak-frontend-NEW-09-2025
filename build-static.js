#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Starting static build process...');

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π next.config.js –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
const staticNextConfig = `
const path = require('path');

/** @type {import('next').NextConfig} */
const nextConfig = {
  distDir: 'out',
  trailingSlash: true,
  images: { 
    unoptimized: true 
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
  experimental: {
    outputFileTracingRoot: path.join(__dirname, '../../'),
  },
  async generateBuildId() {
    return 'upak-static-export'
  },
};

module.exports = nextConfig;
`;

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
const originalConfig = fs.existsSync('next.config.js') ? fs.readFileSync('next.config.js', 'utf8') : '';

try {
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ñ–∏–≥
  fs.writeFileSync('next.config.js', staticNextConfig);
  
  console.log('‚úÖ Created static next.config.js');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É
  execSync('npx next build', { stdio: 'inherit' });
  
  console.log('‚úÖ Static build completed successfully!');
  
} catch (error) {
  console.error('‚ùå Build failed:', error.message);
  process.exit(1);
} finally {
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
  if (originalConfig) {
    fs.writeFileSync('next.config.js', originalConfig);
  }
}